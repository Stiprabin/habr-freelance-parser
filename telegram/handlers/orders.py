from aiogram import types
from aiogram.dispatcher import FSMContext
from telegram import keyboards
from telegram.state_group import OrdersGroup
from parser import parser_habr
import math


# URL-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–∏—Å–∞
URL = "https://freelance.habr.com"


# –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —É—Å–ª–æ–≤–∏–π
async def orders_text(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        # —É—Å–ª–æ–≤–∏—è –∏ –º–∞—Ä–∫–µ—Ä—ã
        data['args'] = [
            '&only_mentioned=',
            '&only_with_price=',
            '&safe_deal=',
            '&only_urgent='
        ]
        data['markers'] = ['‚óã' for i in range(4)]

        data['message'] = await message.answer(
            text="–í—ã–±–µ—Ä–∏ <b>—É—Å–ª–æ–≤–∏—è</b> –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:",
            reply_markup=keyboards.get_args_keyboard()
        )

    await OrdersGroup.args.set()


# –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä
async def orders_args(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        # —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —É—Å–ª–æ–≤–∏—è
        def set_arg(i):
            if data['args'][i][-1:] == '=':
                data['markers'][i] = '‚óâ'
                data['args'][i] += '1'
            else:
                data['markers'][i] = '‚óã'
                data['args'][i] = data['args'][i][:-1]

        match callback.data:

            case "mentioned":
                set_arg(0)
            case "price":
                set_arg(1)
            case "safe":
                set_arg(2)
            case "urgent":
                set_arg(3)

            # –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            case "finish":
                await data['message'].edit_text(
                    text="–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ <b>–æ–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.</b>",
                    reply_markup=None
                )
                await OrdersGroup.query.set()
                return

        await data['message'].edit_reply_markup(reply_markup=keyboards.get_args_keyboard(data['markers']))


# –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–∞–º–∏
async def orders_query(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        # –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ø–∏—Å–∫–æ–º —Å –∑–∞–∫–∞–∑–∞–º–∏
        async def orders_list_problem(txt):
            await data['message'].delete()
            await message.answer(
                text=txt,
                reply_markup=keyboards.menu_keyboard
            )
            await state.finish()

        # –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        data['query'] = message.text

        data['message'] = await message.answer(text="<b><em>‚åõ –ñ–µ—Å—Ç–∫–æ –∏—â—É –∑–∞–∫–∞–∑—ã...</em></b>",)

        # –ø–∞—Ä—Å–∏–Ω–≥
        orders_list = await parser_habr(
            url=URL,
            query=data['query'],
            args=''.join(data['args'])
        )

        # –≤—ã–π—Ç–∏ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∑–∞–∫—Ä—ã—Ç—å FSM, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        if orders_list == "Error":
            await orders_list_problem("<b>‚ò¢ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–∑–∂–µ.")
            return

        elif orders_list == "I‚Äôm a teapot":
            await orders_list_problem("<b>‚òï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞!</b> –Ø –Ω–µ –º–æ–≥—É –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –≤–∞–º –∫–æ—Ñ–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ —è —á–∞–π–Ω–∏–∫")
            return

        text = "<b>üì¢ –ñ–µ—Å—Ç–∫–æ –Ω–∞—à–µ–ª –∑–∞–∫–∞–∑—ã:</b>\n\n"

        # –µ—Å—Ç—å –ª–∏ –∑–∞–∫–∞–∑—ã?
        if not orders_list:
            # –≤—ã–π—Ç–∏ –∏–∑ FSM, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            await orders_list_problem("<b>üì¢ –ù–µ—Ç—É —Ç–∞–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤!</b>")
            return
        else:
            # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –∑–∞–∫–∞–∑—ã –µ—Å—Ç—å
            counter = 0
            page = 1
            last_page = math.ceil((orders_list.index(orders_list[-1]) + 1) / 5)

            for order in orders_list:
                text += f"{order[0]}\n" \
                        f"<em>{order[1]}</em>\n" \
                        f"<b><u>{order[2]}</u></b>\n" \
                        f"<u>{order[3]}</u>\n\n"

                counter += 1

                # –≤—ã–π—Ç–∏ –∏–∑ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏–π
                if orders_list[-1] == order:
                    break

                # –¥–æ–±–∞–≤–∏—Ç—å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –∫—Ä–∞—Ç–µ–Ω –ø—è—Ç–∏ –ø–æ —Å—á–µ—Ç—É
                if counter == 5:
                    text += f"üìñ <em><b>{page} –∏–∑ {last_page}</b></em>~<b>üì¢ –ñ–µ—Å—Ç–∫–æ –Ω–∞—à–µ–ª –∑–∞–∫–∞–∑—ã:</b>\n\n"
                    page += 1
                    counter = 0

            # –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            text += f"üìñ <em><b>{last_page} –∏–∑ {last_page}</b></em>"
            text = text.split('~')

            data['text'] = text
            data['index'] = 0

            # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤
            if len(text) == 1:
                await data['message'].delete()
                await message.answer(
                    text=data['text'][data['index']],
                    disable_web_page_preview=True,
                    reply_markup=keyboards.menu_keyboard
                )
                await state.finish()
                return
            else:
                await data['message'].delete()
                data['message'] = await message.answer(
                    text=data['text'][data['index']],
                    disable_web_page_preview=True,
                    reply_markup=keyboards.orders_keyboard
                )

        await OrdersGroup.message.set()


# callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏
async def orders_message(callback: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        # –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–∞–º–∏
        async def get_response_message():
            await data['message'].edit_text(
                text=data['text'][data['index']],
                disable_web_page_preview=True,
                reply_markup=keyboards.orders_keyboard
            )

        match callback.data:

            # –Ω–∞–∑–∞–¥
            case "back":
                data['index'] -= 1
                if data['index'] < 0: data['index'] = len(data['text']) - 1
                await get_response_message()

            # –≤–ø–µ—Ä–µ–¥
            case "forward":
                data['index'] += 1
                if data['index'] > len(data['text']) - 1: data['index'] = 0
                await get_response_message()

            # –≤—ã–π—Ç–∏ –∏–∑ FSM
            case "leave":
                await data['message'].delete_reply_markup()
                await callback.message.answer(
                    text="<b>–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>",
                    reply_markup=keyboards.menu_keyboard
                )
                await state.finish()
